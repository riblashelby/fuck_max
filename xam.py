import asyncio
from playwright.async_api import async_playwright
import requests
import os
import json
import time
import gc  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞
from datetime import datetime, timedelta
import pytz  # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
import hashlib
import signal
import atexit

# --- –î–ê–ù–ù–´–ï ---
PHONE = "9944476229"  # —Ç–≤–æ–π –Ω–æ–º–µ—Ä
TG_BOT_TOKEN = "8487304030:AAEemcE1Y9J1plzoOlZuxm8XDF_7WzQZtI4"
TG_CHANNEL = "@max_bridgetotg"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
TIMEZONE = pytz.timezone('Asia/Yekaterinburg')

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
SESSION_DIR = "./max_session"
COOKIES_FILE = os.path.join(SESSION_DIR, "cookies.json")
STORAGE_FILE = os.path.join(SESSION_DIR, "storage.json")
MESSAGES_FILE = os.path.join(SESSION_DIR, "last_messages.json")
LAST_CHECK_FILE = os.path.join(SESSION_DIR, "last_check_time.json")
STATUS_MESSAGE_FILE = os.path.join(SESSION_DIR, "status_message.json")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è ID —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
status_message_id = None

def get_local_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞"""
    return datetime.now(TIMEZONE)

def format_local_time(dt=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    if dt is None:
        dt = get_local_time()
    return dt.strftime('%Y-%m-%d %H:%M:%S')

def cleanup_memory():
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∏ —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞"""
    try:
        print("üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        collected = gc.collect()
        print(f"üóëÔ∏è –°–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤ –º—É—Å–æ—Ä–∞")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        images_dir = os.path.join(SESSION_DIR, "images")
        if os.path.exists(images_dir):
            current_time = time.time()
            cleaned_files = 0
            
            for filename in os.listdir(images_dir):
                file_path = os.path.join(images_dir, filename)
                if os.path.isfile(file_path):
                    file_age = current_time - os.path.getmtime(file_path)
                    if file_age > 3600:  # 1 —á–∞—Å
                        try:
                            os.remove(file_path)
                            cleaned_files += 1
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {filename}: {e}")
            
            if cleaned_files > 0:
                print(f"üóÇÔ∏è –£–¥–∞–ª–µ–Ω–æ {cleaned_files} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if os.path.exists(MESSAGES_FILE):
            try:
                with open(MESSAGES_FILE, 'r') as f:
                    data = json.load(f)
                
                messages = data.get('messages', {})
                if len(messages) > 100:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ 100
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                    sorted_messages = sorted(
                        messages.items(), 
                        key=lambda x: x[1].get('created_at', 0)
                    )
                    recent_messages = dict(sorted_messages[-50:])
                    
                    data['messages'] = recent_messages
                    with open(MESSAGES_FILE, 'w') as f:
                        json.dump(data, f, indent=2)
                    
                    print(f"üìù –û—á–∏—â–µ–Ω–∞ –±–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –æ—Å—Ç–∞–≤–ª–µ–Ω–æ 50 –∏–∑ {len(messages)}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")

async def save_session(context, page):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–µ—Å—Å–∏—é (cookies + localStorage + sessionStorage)"""
    os.makedirs(SESSION_DIR, exist_ok=True)
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
        cookies = await context.cookies()
        with open(COOKIES_FILE, 'w') as f:
            json.dump(cookies, f, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º localStorage –∏ sessionStorage
        storage_data = await page.evaluate("""
            () => {
                const localStorage_data = {};
                const sessionStorage_data = {};
                
                // –ü–æ–ª—É—á–∞–µ–º localStorage
                try {
                    for (let i = 0; i < localStorage.length; i++) {
                        const key = localStorage.key(i);
                        localStorage_data[key] = localStorage.getItem(key);
                    }
                } catch (e) {
                    console.log('localStorage error:', e);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º sessionStorage
                try {
                    for (let i = 0; i < sessionStorage.length; i++) {
                        const key = sessionStorage.key(i);
                        sessionStorage_data[key] = sessionStorage.getItem(key);
                    }
                } catch (e) {
                    console.log('sessionStorage error:', e);
                }
                
                return {
                    localStorage: localStorage_data,
                    sessionStorage: sessionStorage_data
                };
            }
        """)
        
        with open(STORAGE_FILE, 'w') as f:
            json.dump(storage_data, f, indent=2)
        
        print("‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return False

async def load_session(context, page):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–µ—Å—Å–∏—é"""
    session_loaded = False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
        if os.path.exists(COOKIES_FILE):
            with open(COOKIES_FILE, 'r') as f:
                cookies = json.load(f)
            await context.add_cookies(cookies)
            session_loaded = True
            print("‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º localStorage –∏ sessionStorage
        if os.path.exists(STORAGE_FILE):
            with open(STORAGE_FILE, 'r') as f:
                storage_data = json.load(f)
            
            await page.evaluate("""
                (storage_data) => {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º localStorage
                    try {
                        if (storage_data.localStorage) {
                            for (const [key, value] of Object.entries(storage_data.localStorage)) {
                                localStorage.setItem(key, value);
                            }
                        }
                    } catch (e) {
                        console.log('localStorage restore error:', e);
                    }
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sessionStorage
                    try {
                        if (storage_data.sessionStorage) {
                            for (const [key, value] of Object.entries(storage_data.sessionStorage)) {
                                sessionStorage.setItem(key, value);
                            }
                        }
                    } catch (e) {
                        console.log('sessionStorage restore error:', e);
                    }
                }
            """, storage_data)
            print("‚úÖ Storage –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        
        return session_loaded
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return False

async def check_logged_in(page):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        await page.goto("https://web.max.ru", timeout=15000)
        await asyncio.sleep(5)
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await page.wait_for_load_state('networkidle', timeout=10000)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ - –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
        login_field = await page.locator("input.field").count()
        if login_field > 0:
            print("üîê –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–æ–≤
        interface_selectors = [
            "[data-testid='chat-list']",
            ".chat-list",
            ".sidebar",
            ".messages",
            ".dialog-list",
            ".chats",
            ".conversations"
        ]
        
        for selector in interface_selectors:
            count = await page.locator(selector).count()
            if count > 0:
                print("‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–æ–≤ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return True
        
        print("‚ùì –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ—è—Å–µ–Ω")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def create_message_hash(text, timestamp_str="", sender=""):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã)
    normalized_text = ' '.join(text.split())
    # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∏–∑ —Ç–µ–∫—Å—Ç–∞, –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    hash_input = f"{normalized_text}|{timestamp_str}|{sender}"
    return hashlib.md5(hash_input.encode('utf-8')).hexdigest()

async def save_last_messages(messages_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    os.makedirs(SESSION_DIR, exist_ok=True)
    try:
        with open(MESSAGES_FILE, 'w') as f:
            json.dump({
                'messages': messages_data,
                'last_check': time.time()
            }, f, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def load_last_messages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    if os.path.exists(MESSAGES_FILE):
        try:
            with open(MESSAGES_FILE, 'r') as f:
                data = json.load(f)
            return data.get('messages', {}), data.get('last_check', 0)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return {}, 0
    return {}, 0

def save_last_check_time():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
    os.makedirs(SESSION_DIR, exist_ok=True)
    current_time = time.time()
    local_time = get_local_time()
    
    try:
        with open(LAST_CHECK_FILE, 'w') as f:
            json.dump({
                'last_check_time': current_time,
                'readable_time': format_local_time(local_time)
            }, f, indent=2)
        return current_time
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return current_time

def load_last_check_time():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(LAST_CHECK_FILE):
        try:
            with open(LAST_CHECK_FILE, 'r') as f:
                data = json.load(f)
            return data.get('last_check_time', 0)
        except:
            pass
    return 0

async def download_image(page, img_url, img_filename):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ"""
    try:
        os.makedirs(os.path.join(SESSION_DIR, "images"), exist_ok=True)
        img_path = os.path.join(SESSION_DIR, "images", img_filename)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
        response = await page.request.get(img_url)
        if response.ok:
            with open(img_path, 'wb') as f:
                f.write(await response.body())
            return img_path
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def send_to_telegram(text, image_path=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram —Å retry –ª–æ–≥–∏–∫–æ–π"""
    max_retries = 3
    for attempt in range(max_retries):
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 1000:  # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—á–µ
                text = text[:1000] + "..."
            
            if image_path and os.path.exists(image_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/sendPhoto"
                
                with open(image_path, 'rb') as photo:
                    files = {'photo': photo}
                    data = {
                        'chat_id': TG_CHANNEL,
                        'caption': text,
                        'parse_mode': 'HTML'
                    }
                    
                    response = requests.post(url, files=files, data=data, timeout=15)
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                try:
                    os.remove(image_path)
                except:
                    pass
                    
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage"
                response = requests.post(url, json={
                    "chat_id": TG_CHANNEL, 
                    "text": text,
                    "parse_mode": "HTML"
                }, timeout=10)
            
            if response.status_code == 200:
                msg_type = "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" if image_path else "—Å–æ–æ–±—â–µ–Ω–∏–µ"
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {msg_type} –≤ Telegram")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {response.status_code}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2)
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2)
    
    return False

def save_status_message_id(message_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    os.makedirs(SESSION_DIR, exist_ok=True)
    try:
        with open(STATUS_MESSAGE_FILE, 'w') as f:
            json.dump({'message_id': message_id}, f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å—Ç–∞—Ç—É—Å–∞: {e}")

def load_status_message_id():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if os.path.exists(STATUS_MESSAGE_FILE):
        try:
            with open(STATUS_MESSAGE_FILE, 'r') as f:
                data = json.load(f)
            return data.get('message_id')
        except:
            pass
    return None

async def send_or_update_status_message(status="–∞–∫—Ç–∏–≤–µ–Ω", is_initial=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ"""
    global status_message_id
    
    current_time = format_local_time()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è
    status_text = f"ü§ñ <b>–°—Ç–∞—Ç—É—Å —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Max</b>\n\n"
    status_text += f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{status}</b>\n"
    status_text += f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <i>{current_time} (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)</i>"
    
    if status == "–∞–∫—Ç–∏–≤–µ–Ω":
        status_text += f"\n\nüîÑ –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç..."
    else:
        status_text += f"\n\n‚è∏Ô∏è –°–∫—Ä–∏–ø—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    try:
        if is_initial or not status_message_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage"
            response = requests.post(url, json={
                "chat_id": TG_CHANNEL,
                "text": status_text,
                "parse_mode": "HTML"
            }, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                status_message_id = result['result']['message_id']
                save_status_message_id(status_message_id)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {status}")
                return True
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/editMessageText"
            response = requests.post(url, json={
                "chat_id": TG_CHANNEL,
                "message_id": status_message_id,
                "text": status_text,
                "parse_mode": "HTML"
            }, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {status}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                return await send_or_update_status_message(status, is_initial=True)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {e}")
    
    return False

async def get_messages_from_page(page):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    messages_data = {}
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await page.reload(timeout=30000)
        await page.wait_for_load_state('networkidle', timeout=15000)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await page.keyboard.press("End")
        await asyncio.sleep(3)
        
        print("üîç –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_info = await page.evaluate("""
            () => {
                const messages = [];
                
                // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                const selectors = [
                    '.message',
                    '[data-message]',
                    '[data-message-id]',
                    '.chat-message',
                    '.msg',
                    '.dialog-message',
                    '.message-container',
                    '.message-bubble',
                    '[class*="message"]',
                    '[id*="message"]',
                    'div[role="log"] > div',
                    '.im-page-chat-body .im-message',
                    '.tgico-message',
                    '.Message',
                    '.bubble'
                ];
                
                let foundElements = [];
                
                // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                for (const selector of selectors) {
                    try {
                        const elements = document.querySelectorAll(selector);
                        if (elements.length > 0) {
                            console.log(`–ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                            foundElements = Array.from(elements);
                            break;
                        }
                    } catch (e) {
                        continue;
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ª—é–±—ã–µ div —Å —Ç–µ–∫—Å—Ç–æ–º
                if (foundElements.length === 0) {
                    console.log('–ò—â–µ–º –ª—é–±—ã–µ div —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...');
                    const allDivs = document.querySelectorAll('div');
                    foundElements = Array.from(allDivs).filter(div => {
                        const text = div.textContent || '';
                        return text.length > 10 && text.length < 1000 && 
                               div.children.length < 10; // –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
                    });
                    console.log(`–ù–∞–π–¥–µ–Ω–æ ${foundElements.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                foundElements.slice(-20).forEach((element, index) => { // –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
                    try {
                        const fullText = element.textContent || element.innerText || '';
                        if (fullText.trim().length < 2) return;
                        
                        // –ò—â–µ–º –≤—Ä–µ–º—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ
                        let timeText = '';
                        const timeSelectors = ['.time', '.timestamp', '.message-time', '[data-time]', '.date'];
                        for (const timeSelector of timeSelectors) {
                            const timeEl = element.querySelector(timeSelector);
                            if (timeEl) {
                                timeText = timeEl.textContent || '';
                                break;
                            }
                        }
                        
                        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–µ
                        if (!timeText) {
                            const timePattern = /\b(\d{1,2}:\d{2})\b/;
                            const timeMatch = fullText.match(timePattern);
                            if (timeMatch) {
                                timeText = timeMatch[1];
                            }
                        }
                        
                        // –ò—â–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        let sender = '';
                        const senderSelectors = [
                            '.sender', '.author', '.username', '.name', 
                            '.peer-title', '.message-author', '.from'
                        ];
                        
                        for (const senderSelector of senderSelectors) {
                            const senderEl = element.querySelector(senderSelector);
                            if (senderEl) {
                                sender = senderEl.textContent || '';
                                break;
                            }
                        }
                        
                        // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        const images = [];
                        const imgElements = element.querySelectorAll('img');
                        imgElements.forEach(img => {
                            const src = img.src;
                            if (src && (src.startsWith('http') || src.startsWith('data:'))) {
                                images.push(src);
                            }
                        });
                        
                        messages.push({
                            index: index,
                            text: fullText.trim(),
                            time: timeText.trim(),
                            sender: sender.trim(),
                            images: images
                        });
                        
                    } catch (e) {
                        console.log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:', e);
                    }
                });
                
                return messages;
            }
        """)
        
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(messages_info)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_time = time.time()
        current_local_time = format_local_time()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è
        
        for msg_info in messages_info:
            try:
                text = msg_info['text']
                time_str = msg_info['time']
                sender = msg_info['sender']
                images = msg_info['images']
                
                if len(text) < 3:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                final_message = ""
                
                if sender:
                    final_message += f"üë§ <b>–û—Ç: {sender}</b>\n"
                else:
                    final_message += "üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Max!</b>\n"
                
                final_message += "‚îÄ" * 25 + "\n"
                final_message += f"{text}\n"
                
                if images:
                    if len(images) == 1:
                        final_message += "üì∑ <i>–°–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</i>\n"
                    else:
                        final_message += f"üì∑ <i>–°–æ–¥–µ—Ä–∂–∏—Ç {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</i>\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è - —Å–Ω–∞—á–∞–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—Ç–æ–º —Ç–µ–∫—É—â–µ–µ –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ
                if time_str:
                    final_message += f"\nüïí <i>–í—Ä–µ–º—è –≤ —á–∞—Ç–µ: {time_str}</i>"
                
                final_message += f"\nüìÖ <i>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {current_local_time} (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)</i>"
                
                # –°–æ–∑–¥–∞–µ–º —Ö–µ—à
                msg_hash = create_message_hash(text, time_str, sender)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                image_path = None
                if images:
                    try:
                        first_image = images[0]
                        if first_image.startswith('http'):
                            img_filename = f"img_{msg_hash[:8]}_{int(current_time)}.jpg"
                            image_path = await download_image(page, first_image, img_filename)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                messages_data[msg_hash] = {
                    'text': final_message,
                    'timestamp': time_str,
                    'created_at': current_time,
                    'sender': sender or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    'image_path': image_path,
                    'has_images': len(images) > 0,
                    'raw_text': text  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                }
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(messages_data)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return messages_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return {}

async def monitor_messages(page):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 15 –º–∏–Ω—É—Ç"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 15 –º–∏–Ω—É—Ç)...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_or_update_status_message("–∞–∫—Ç–∏–≤–µ–Ω", is_initial=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_messages_data, last_check_time = await load_last_messages()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    print("üì° –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    current_messages_data = await get_messages_from_page(page)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(current_messages_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ
    if not last_messages_data or len(last_messages_data) < 3:
        print("üÜï –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É —Å–æ–æ–±—â–µ–Ω–∏–π")
        await save_last_messages(current_messages_data)
        last_messages_data = current_messages_data
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        current_local_time = format_local_time()
        await send_to_telegram(f"üöÄ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!</b>\n\n–°–∫—Ä–∏–ø—Ç –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ Max.\nüìÖ <i>–ó–∞–ø—É—Å–∫: {current_local_time} (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)</i>\n‚è∞ <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç</i>")
    
    save_last_check_time()
    iteration = 0
    
    while True:
        try:
            iteration += 1
            local_time = format_local_time()
            print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ #{iteration} - {local_time}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –º—É—Å–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
            if iteration % 10 == 0:
                cleanup_memory()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
                await send_or_update_status_message("–∞–∫—Ç–∏–≤–µ–Ω")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
            await asyncio.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_messages_data = await get_messages_from_page(page)
            
            if not new_messages_data:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                await asyncio.sleep(30)
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–Ω–∏–º–∫–µ
            new_message_hashes = set(new_messages_data.keys()) - set(last_messages_data.keys())
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            recent_messages = []
            current_time = time.time()
            
            for msg_hash, msg_data in new_messages_data.items():
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–µ –ø–æ —Ö–µ—à—É –ò–õ–ò –æ—á–µ–Ω—å —Å–≤–µ–∂–µ–µ (–º–µ–Ω–µ–µ 20 –º–∏–Ω—É—Ç)
                is_new_hash = msg_hash in new_message_hashes
                is_very_recent = (current_time - msg_data.get('created_at', 0)) < 1200  # 20 –º–∏–Ω—É—Ç
                
                if is_new_hash or (is_very_recent and msg_hash not in last_messages_data):
                    recent_messages.append(msg_hash)
            
            if recent_messages:
                print(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(recent_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for msg_hash in recent_messages:
                    message_data = new_messages_data[msg_hash]
                    
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {message_data['raw_text'][:50]}...")
                    
                    success = await send_to_telegram(
                        message_data['text'], 
                        message_data.get('image_path')
                    )
                    
                    if success:
                        sender_info = f" –æ—Ç {message_data['sender']}" if message_data['sender'] != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else ""
                        img_info = " (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)" if message_data.get('image_path') else ""
                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ{sender_info}{img_info}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    
                    await asyncio.sleep(2)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await save_last_messages(new_messages_data)
                last_messages_data = new_messages_data
                print("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                
            else:
                print("üì≠ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö –Ω–µ—Ç
                await save_last_messages(new_messages_data)
                last_messages_data = new_messages_data
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            save_last_check_time()
            
            # –ü–∞—É–∑–∞ 15 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            print(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç...")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            for i in range(90):  # 90 * 10 —Å–µ–∫—É–Ω–¥ = 15 –º–∏–Ω—É—Ç
                await asyncio.sleep(10)
                # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if i % 30 == 29:  # 30 * 10 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
                    remaining = (90 - i - 1) * 10 // 60
                    print(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {remaining} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É
            continue

async def login(page, context):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ª–æ–≥–∏–Ω–∞"""
    print("üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç...")
    
    try:
        # 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
        await page.goto("https://web.max.ru", timeout=30000)
        await page.wait_for_load_state('networkidle')

        # 2. –ò—â–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –Ω–æ–º–µ—Ä–∞
        await page.wait_for_selector("input.field", timeout=30000)
        await page.fill("input.field", PHONE)
        await asyncio.sleep(1)
        await page.keyboard.press("Enter")

        # 3. –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è SMS-–∫–æ–¥–∞
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞...")
        await page.wait_for_selector(".code input.digit", timeout=60000)

        # 4. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏
        sms_code = input("üì± –í–≤–µ–¥–∏ –°–ú–°-–∫–æ–¥ (6 —Ü–∏—Ñ—Ä): ").strip()
        
        if len(sms_code) != 6 or not sms_code.isdigit():
            print("‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 6 —Ü–∏—Ñ—Ä")
            return False

        # 5. –í–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —Ü–∏—Ñ—Ä—É
        digit_inputs = await page.locator(".code input.digit").all()
        
        for i, digit in enumerate(sms_code):
            if i < len(digit_inputs):
                await digit_inputs[i].fill(digit)
                await asyncio.sleep(0.2)

        await page.keyboard.press("Enter")
        
        # 6. –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        await asyncio.sleep(10)
        await page.wait_for_load_state('networkidle', timeout=30000)
        
        # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        await save_session(context, page)
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def cleanup():
    """–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        import requests
        current_time = format_local_time()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è
        status_text = f"ü§ñ <b>–°—Ç–∞—Ç—É—Å —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Max</b>\n\n"
        status_text += f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</b>\n"
        status_text += f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <i>{current_time} (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)</i>\n\n"
        status_text += f"‚è∏Ô∏è –°–∫—Ä–∏–ø—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        message_id = load_status_message_id()
        if message_id:
            url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/editMessageText"
            response = requests.post(url, json={
                "chat_id": TG_CHANNEL,
                "message_id": message_id,
                "text": status_text,
                "parse_mode": "HTML"
            }, timeout=5)
            
            if response.status_code == 200:
                print("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: —Å–∫—Ä–∏–ø—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        cleanup_memory()
                
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    cleanup()
    exit(0)

async def main():
    global status_message_id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º ID —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    status_message_id = load_status_message_id()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    atexit.register(cleanup)
    
    async with async_playwright() as p:
        # –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        browser = await p.chromium.launch(
            headless=True,
            args=[
                '--disable-blink-features=AutomationControlled',
                '--disable-dev-shm-usage',
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-background-timer-throttling',
                '--disable-backgrounding-occluded-windows',
                '--disable-renderer-backgrounding',
                '--memory-pressure-off'
            ]
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        context = await browser.new_context(
            user_agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            viewport={'width': 1920, 'height': 1080},
            ignore_https_errors=True
        )
        
        page = await context.new_page()

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            session_loaded = await load_session(context, page)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
            logged_in = False
            if session_loaded:
                logged_in = await check_logged_in(page)
            
            if not logged_in:
                print("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                if not await login(page, context):
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                    await browser.close()
                    return
            else:
                print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥...")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            print("üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç...")
            await page.goto("https://web.max.ru/-68122153113024", timeout=30000)
            await page.wait_for_load_state('networkidle')
            await asyncio.sleep(5)
            
            print("üéØ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω! –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 15 –º–∏–Ω—É—Ç...")
            print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏ Ctrl+C")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await monitor_messages(page)
            
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            await send_or_update_status_message("–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        except Exception as e:
            print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await send_or_update_status_message("–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            import traceback
            traceback.print_exc()
        finally:
            print("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            await browser.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


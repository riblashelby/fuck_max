import asyncio
from playwright.async_api import async_playwright
import requests
import os
import json
import time
from datetime import datetime, timedelta
import hashlib
import signal
import atexit

# --- –î–ê–ù–ù–´–ï ---
PHONE = "9944476229"  # —Ç–≤–æ–π –Ω–æ–º–µ—Ä
TG_BOT_TOKEN = "8487304030:AAEemcE1Y9J1plzoOlZuxm8XDF_7WzQZtI4"
TG_CHANNEL = "@max_bridgetotg"

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
SESSION_DIR = "./max_session"
COOKIES_FILE = os.path.join(SESSION_DIR, "cookies.json")
STORAGE_FILE = os.path.join(SESSION_DIR, "storage.json")
MESSAGES_FILE = os.path.join(SESSION_DIR, "last_messages.json")
LAST_CHECK_FILE = os.path.join(SESSION_DIR, "last_check_time.json")
STATUS_MESSAGE_FILE = os.path.join(SESSION_DIR, "status_message.json")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è ID —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
status_message_id = None

async def save_session(context, page):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–µ—Å—Å–∏—é (cookies + localStorage + sessionStorage)"""
    os.makedirs(SESSION_DIR, exist_ok=True)
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
        cookies = await context.cookies()
        with open(COOKIES_FILE, 'w') as f:
            json.dump(cookies, f, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º localStorage –∏ sessionStorage
        storage_data = await page.evaluate("""
            () => {
                const localStorage_data = {};
                const sessionStorage_data = {};
                
                // –ü–æ–ª—É—á–∞–µ–º localStorage
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    localStorage_data[key] = localStorage.getItem(key);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º sessionStorage
                for (let i = 0; i < sessionStorage.length; i++) {
                    const key = sessionStorage.key(i);
                    sessionStorage_data[key] = sessionStorage.getItem(key);
                }
                
                return {
                    localStorage: localStorage_data,
                    sessionStorage: sessionStorage_data
                };
            }
        """)
        
        with open(STORAGE_FILE, 'w') as f:
            json.dump(storage_data, f, indent=2)
        
        print("‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return False

async def load_session(context, page):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–µ—Å—Å–∏—é"""
    session_loaded = False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
        if os.path.exists(COOKIES_FILE):
            with open(COOKIES_FILE, 'r') as f:
                cookies = json.load(f)
            await context.add_cookies(cookies)
            session_loaded = True
            print("‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º localStorage –∏ sessionStorage
        if os.path.exists(STORAGE_FILE):
            with open(STORAGE_FILE, 'r') as f:
                storage_data = json.load(f)
            
            await page.evaluate("""
                (storage_data) => {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º localStorage
                    if (storage_data.localStorage) {
                        for (const [key, value] of Object.entries(storage_data.localStorage)) {
                            localStorage.setItem(key, value);
                        }
                    }
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sessionStorage
                    if (storage_data.sessionStorage) {
                        for (const [key, value] of Object.entries(storage_data.sessionStorage)) {
                            sessionStorage.setItem(key, value);
                        }
                    }
                }
            """, storage_data)
            print("‚úÖ Storage –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        
        return session_loaded
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return False

async def check_logged_in(page):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        await page.goto("https://web.max.ru", timeout=15000)
        await asyncio.sleep(5)
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await page.wait_for_load_state('networkidle', timeout=10000)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ - –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
        login_field = await page.locator("input.field").count()
        if login_field > 0:
            print("üîê –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–æ–≤
        interface_selectors = [
            "[data-testid='chat-list']",
            ".chat-list",
            ".sidebar",
            ".messages",
            ".dialog-list",
            ".chats",
            ".conversations"
        ]
        
        for selector in interface_selectors:
            count = await page.locator(selector).count()
            if count > 0:
                print("‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–æ–≤ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return True
        
        print("‚ùì –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ—è—Å–µ–Ω")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def create_message_hash(text, timestamp_str=""):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã)
    normalized_text = ' '.join(text.split())
    # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
    hash_input = f"{normalized_text}|{timestamp_str}"
    return hashlib.md5(hash_input.encode('utf-8')).hexdigest()

async def save_last_messages(messages_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    os.makedirs(SESSION_DIR, exist_ok=True)
    with open(MESSAGES_FILE, 'w') as f:
        json.dump({
            'messages': messages_data,
            'last_check': time.time()
        }, f, indent=2)

async def load_last_messages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    if os.path.exists(MESSAGES_FILE):
        try:
            with open(MESSAGES_FILE, 'r') as f:
                data = json.load(f)
            return data.get('messages', {}), data.get('last_check', 0)
        except:
            return {}, 0
    return {}, 0

def save_last_check_time():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
    os.makedirs(SESSION_DIR, exist_ok=True)
    current_time = time.time()
    with open(LAST_CHECK_FILE, 'w') as f:
        json.dump({
            'last_check_time': current_time,
            'readable_time': datetime.fromtimestamp(current_time).strftime('%Y-%m-%d %H:%M:%S')
        }, f, indent=2)
    return current_time

def load_last_check_time():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(LAST_CHECK_FILE):
        try:
            with open(LAST_CHECK_FILE, 'r') as f:
                data = json.load(f)
            return data.get('last_check_time', 0)
        except:
            pass
    return 0

def is_message_recent(message_time_str, last_check_timestamp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–µ–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        time_formats = [
            "%H:%M",
            "%H:%M:%S", 
            "%d.%m %H:%M",
            "%d/%m %H:%M",
            "—Å–µ–≥–æ–¥–Ω—è %H:%M",
            "–≤—á–µ—Ä–∞ %H:%M"
        ]
        
        message_time = None
        now = datetime.now()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
        if "—Å–µ–≥–æ–¥–Ω—è" in message_time_str.lower():
            time_part = message_time_str.lower().replace("—Å–µ–≥–æ–¥–Ω—è", "").strip()
            try:
                message_time = datetime.strptime(time_part, "%H:%M").replace(
                    year=now.year, month=now.month, day=now.day
                )
            except:
                pass
        elif "–≤—á–µ—Ä–∞" in message_time_str.lower():
            time_part = message_time_str.lower().replace("–≤—á–µ—Ä–∞", "").strip()
            try:
                yesterday = now - timedelta(days=1)
                message_time = datetime.strptime(time_part, "%H:%M").replace(
                    year=yesterday.year, month=yesterday.month, day=yesterday.day
                )
            except:
                pass
        else:
            # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            for fmt in time_formats:
                try:
                    if "%d" not in fmt:  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
                        message_time = datetime.strptime(message_time_str, fmt).replace(
                            year=now.year, month=now.month, day=now.day
                        )
                    else:  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                        message_time = datetime.strptime(message_time_str, fmt).replace(year=now.year)
                    break
                except:
                    continue
        
        if message_time:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            message_timestamp = message_time.timestamp()
            return message_timestamp > last_check_timestamp
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ '{message_time_str}': {e}")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, —Å—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    return True

async def download_image(page, img_url, img_filename):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ"""
    try:
        os.makedirs(os.path.join(SESSION_DIR, "images"), exist_ok=True)
        img_path = os.path.join(SESSION_DIR, "images", img_filename)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
        response = await page.request.get(img_url)
        if response.ok:
            with open(img_path, 'wb') as f:
                f.write(await response.body())
            return img_path
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def send_to_telegram(text, image_path=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram —Å retry –ª–æ–≥–∏–∫–æ–π"""
    max_retries = 3
    for attempt in range(max_retries):
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 1000:  # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—á–µ
                text = text[:1000] + "..."
            
            if image_path and os.path.exists(image_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/sendPhoto"
                
                with open(image_path, 'rb') as photo:
                    files = {'photo': photo}
                    data = {
                        'chat_id': TG_CHANNEL,
                        'caption': text,
                        'parse_mode': 'HTML'
                    }
                    
                    response = requests.post(url, files=files, data=data, timeout=15)
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                try:
                    os.remove(image_path)
                except:
                    pass
                    
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage"
                response = requests.post(url, json={
                    "chat_id": TG_CHANNEL, 
                    "text": text,
                    "parse_mode": "HTML"
                }, timeout=10)
            
            if response.status_code == 200:
                msg_type = "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" if image_path else "—Å–æ–æ–±—â–µ–Ω–∏–µ"
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {msg_type} –≤ Telegram: {text[:50]}...")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {response.status_code}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2)
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2)
    
    return False

def save_status_message_id(message_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    os.makedirs(SESSION_DIR, exist_ok=True)
    with open(STATUS_MESSAGE_FILE, 'w') as f:
        json.dump({'message_id': message_id}, f)

def load_status_message_id():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if os.path.exists(STATUS_MESSAGE_FILE):
        try:
            with open(STATUS_MESSAGE_FILE, 'r') as f:
                data = json.load(f)
            return data.get('message_id')
        except:
            pass
    return None

async def send_or_update_status_message(status="–∞–∫—Ç–∏–≤–µ–Ω", is_initial=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ"""
    global status_message_id
    
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    status_text = f"ü§ñ <b>–°—Ç–∞—Ç—É—Å —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Max</b>\n\n"
    status_text += f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{status}</b>\n"
    status_text += f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <i>{current_time}</i>"
    
    if status == "–∞–∫—Ç–∏–≤–µ–Ω":
        status_text += f"\n\nüîÑ –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è..."
    else:
        status_text += f"\n\n‚è∏Ô∏è –°–∫—Ä–∏–ø—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    try:
        if is_initial or not status_message_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage"
            response = requests.post(url, json={
                "chat_id": TG_CHANNEL,
                "text": status_text,
                "parse_mode": "HTML"
            }, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                status_message_id = result['result']['message_id']
                save_status_message_id(status_message_id)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {status}")
                return True
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/editMessageText"
            response = requests.post(url, json={
                "chat_id": TG_CHANNEL,
                "message_id": status_message_id,
                "text": status_text,
                "parse_mode": "HTML"
            }, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {status}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                return await send_or_update_status_message(status, is_initial=True)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {e}")
    
    return False

async def get_messages_from_page(page):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    messages_data = {}
    last_check_timestamp = load_last_check_time()
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    possible_selectors = [
        ".message",
        "[data-message]",
        ".chat-message", 
        ".msg",
        "div[role='log'] > div",
        ".message-container",
        ".dialog-message",
        ".chat-item",
        ".message-bubble"
    ]
    
    found_selector = None
    for selector in possible_selectors:
        try:
            elements = await page.locator(selector).count()
            if elements > 0:
                found_selector = selector
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π: {selector} ({elements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                break
        except:
            continue
    
    if not found_selector:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return messages_data
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    message_elements = await page.locator(found_selector).all()
    
    for idx, msg_element in enumerate(message_elements):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            full_text = await msg_element.text_content()
            if not full_text or len(full_text.strip()) < 2:
                continue
            
            # –ò—â–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
            time_text = ""
            time_selectors = [
                ".time", ".timestamp", ".message-time", 
                "[data-time]", ".date", ".msg-time"
            ]
            
            for time_sel in time_selectors:
                try:
                    time_elem = msg_element.locator(time_sel).first
                    if await time_elem.count() > 0:
                        time_text = await time_elem.text_content()
                        break
                except:
                    continue
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender = ""
            message_text = full_text.strip()
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender_selectors = [
                ".sender", ".author", ".username", ".name", 
                "[data-sender]", ".message-author", ".from",
                ".peer-title", ".dialog-peer-title", ".user-name",
                ".message-name", ".chat-title", ".contact-name",
                "[data-peer-id] .name", ".avatar + .name"
            ]
            
            for sender_sel in sender_selectors:
                try:
                    sender_elem = msg_element.locator(sender_sel).first
                    if await sender_elem.count() > 0:
                        sender_text = await sender_elem.text_content()
                        if sender_text and sender_text.strip():
                            sender = sender_text.strip()
                            break
                except:
                    continue
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if not sender:
                try:
                    # –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–û
                    parent = msg_element.locator('..')
                    for sender_sel in sender_selectors:
                        try:
                            sender_elem = parent.locator(sender_sel).first
                            sender_count = await sender_elem.count()
                            if sender_count > 0:
                                sender_text = await sender_elem.text_content()
                                if sender_text and sender_text.strip():
                                    sender = sender_text.strip()
                                    break
                        except:
                            continue
                    
                    # –ò—â–µ–º –ø–æ data-–∞—Ç—Ä–∏–±—É—Ç–∞–º
                    if not sender:
                        try:
                            data_attrs = await msg_element.evaluate("""
                                element => {
                                    const attrs = {};
                                    for (let attr of element.attributes) {
                                        if (attr.name.includes('peer') || attr.name.includes('user') || attr.name.includes('sender')) {
                                            attrs[attr.name] = attr.value;
                                        }
                                    }
                                    return attrs;
                                }
                            """)
                            
                            for attr_name, attr_value in data_attrs.items():
                                if attr_value and len(attr_value) < 50:
                                    sender = attr_value
                                    break
                        except:
                            pass
                                
                except Exception as e:
                    # –£–±–∏—Ä–∞–µ–º —Å–ø–∞–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    pass
            
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
            if not sender and message_text:
                lines = message_text.split('\n')
                if len(lines) > 1:
                    potential_sender = lines[0].strip()
                    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    if (len(potential_sender) < 50 and 
                        not potential_sender.replace(':', '').replace(' ', '').isdigit() and
                        (':' in potential_sender or 
                         potential_sender.endswith('–Ω–∞–ø–∏—Å–∞–ª') or 
                         potential_sender.endswith('–æ—Ç–ø—Ä–∞–≤–∏–ª') or
                         any(word in potential_sender.lower() for word in ['admin', 'moderator', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']))):
                        sender = potential_sender.replace(':', '').strip()
                        message_text = '\n'.join(lines[1:]).strip()
            
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            images = []
            image_selectors = [
                "img", ".image", ".photo", ".picture",
                "[data-type='photo']", ".message-media img"
            ]
            
            for img_sel in image_selectors:
                try:
                    img_elements = await msg_element.locator(img_sel).all()
                    for img_elem in img_elements:
                        img_src = await img_elem.get_attribute('src')
                        if img_src and ('http' in img_src or img_src.startswith('data:image')):
                            images.append(img_src)
                except:
                    continue
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –æ–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ
            if time_text and time_text in message_text:
                message_text = message_text.replace(time_text, '').strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if time_text and not is_message_recent(time_text, last_check_timestamp):
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            final_message = ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            if sender:
                # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_sender = sender.replace('–Ω–∞–ø–∏—Å–∞–ª:', '').replace('–æ—Ç–ø—Ä–∞–≤–∏–ª:', '').strip()
                final_message = f"üë§ <b>–û—Ç: {clean_sender}</b>\n"
            else:
                final_message = "üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Max!</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            final_message += "‚îÄ" * 25 + "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if message_text and message_text.strip():
                final_message += f"{message_text}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
            if images:
                if len(images) == 1:
                    final_message += "üì∑ <i>–°–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</i>\n"
                else:
                    final_message += f"üì∑ <i>–°–æ–¥–µ—Ä–∂–∏—Ç {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</i>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
            if time_text:
                final_message += f"\nüïí <i>{time_text}</i>"
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à
            hash_content = message_text + (sender or "") + (time_text or "")
            msg_hash = create_message_hash(hash_content, time_text)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            image_path = None
            if images:
                try:
                    first_image = images[0]
                    if first_image.startswith('http'):
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                        img_filename = f"img_{msg_hash[:8]}_{int(time.time())}.jpg"
                        image_path = await download_image(page, first_image, img_filename)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
            messages_data[msg_hash] = {
                'text': final_message,
                'timestamp': time_text,
                'created_at': time.time(),
                'sender': sender or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                'image_path': image_path,
                'has_images': len(images) > 0
            }
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è {idx}: {e}")
            continue
    
    return messages_data

async def monitor_messages(page):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_or_update_status_message("–∞–∫—Ç–∏–≤–µ–Ω", is_initial=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    save_last_check_time()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_messages_data, last_check_time = await load_last_messages()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    current_messages_data = await get_messages_from_page(page)
    print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(current_messages_data)} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ "—Å—Ç–∞—Ä—ã–µ"
    if not last_messages_data:
        print("üÜï –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")
        await save_last_messages(current_messages_data)
        last_messages_data = current_messages_data
    
    while True:
        try:
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            await asyncio.sleep(2)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await page.keyboard.press("End")
            await asyncio.sleep(1)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_messages_data = await get_messages_from_page(page)
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_message_hashes = set(new_messages_data.keys()) - set(last_messages_data.keys())
            
            if new_message_hashes:
                print(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_message_hashes)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for msg_hash in new_message_hashes:
                    message_data = new_messages_data[msg_hash]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑
                    success = await send_to_telegram(
                        message_data['text'], 
                        message_data.get('image_path')
                    )
                    
                    if success:
                        sender_info = f" –æ—Ç {message_data['sender']}" if message_data['sender'] != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else ""
                        img_info = " (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)" if message_data.get('image_path') else ""
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ{sender_info}{img_info}: {msg_hash[:8]}...")
                    
                    await asyncio.sleep(2)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await save_last_messages(new_messages_data)
                last_messages_data = new_messages_data
            else:
                print("üì≠ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            save_last_check_time()
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            print(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥... ({datetime.now().strftime('%H:%M:%S')})")
            await asyncio.sleep(15)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            await asyncio.sleep(5)  # –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            continue

async def login(page, context):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ª–æ–≥–∏–Ω–∞"""
    print("üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç...")
    
    try:
        # 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
        await page.goto("https://web.max.ru", timeout=30000)
        await page.wait_for_load_state('networkidle')

        # 2. –ò—â–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –Ω–æ–º–µ—Ä–∞
        await page.wait_for_selector("input.field", timeout=30000)
        await page.fill("input.field", PHONE)
        await asyncio.sleep(1)
        await page.keyboard.press("Enter")

        # 3. –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è SMS-–∫–æ–¥–∞
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞...")
        await page.wait_for_selector(".code input.digit", timeout=60000)

        # 4. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏
        sms_code = input("üì± –í–≤–µ–¥–∏ –°–ú–°-–∫–æ–¥ (6 —Ü–∏—Ñ—Ä): ").strip()
        
        if len(sms_code) != 6 or not sms_code.isdigit():
            print("‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 6 —Ü–∏—Ñ—Ä")
            return False

        # 5. –í–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —Ü–∏—Ñ—Ä—É
        digit_inputs = await page.locator(".code input.digit").all()
        
        for i, digit in enumerate(sms_code):
            if i < len(digit_inputs):
                await digit_inputs[i].fill(digit)
                await asyncio.sleep(0.2)

        await page.keyboard.press("Enter")
        
        # 6. –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        await asyncio.sleep(10)
        await page.wait_for_load_state('networkidle', timeout=30000)
        
        # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        await save_session(context, page)
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def cleanup():
    """–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        import requests
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        status_text = f"ü§ñ <b>–°—Ç–∞—Ç—É—Å —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Max</b>\n\n"
        status_text += f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</b>\n"
        status_text += f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <i>{current_time}</i>\n\n"
        status_text += f"‚è∏Ô∏è –°–∫—Ä–∏–ø—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        message_id = load_status_message_id()
        if message_id:
            url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/editMessageText"
            response = requests.post(url, json={
                "chat_id": TG_CHANNEL,
                "message_id": message_id,
                "text": status_text,
                "parse_mode": "HTML"
            }, timeout=5)
            
            if response.status_code == 200:
                print("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: —Å–∫—Ä–∏–ø—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    cleanup()
    exit(0)

async def main():
    global status_message_id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º ID —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    status_message_id = load_status_message_id()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    atexit.register(cleanup)
    
    async with async_playwright() as p:
        # –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        browser = await p.chromium.launch(
            headless=False,
            args=[
                '--disable-blink-features=AutomationControlled',
                '--disable-dev-shm-usage',
                '--no-sandbox',
                '--disable-setuid-sandbox'
            ]
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        context = await browser.new_context(
            user_agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            viewport={'width': 1920, 'height': 1080},
            ignore_https_errors=True
        )
        
        page = await context.new_page()

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            session_loaded = await load_session(context, page)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
            logged_in = False
            if session_loaded:
                logged_in = await check_logged_in(page)
            
            if not logged_in:
                print("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                if not await login(page, context):
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                    await browser.close()
                    return
            else:
                print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥...")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            print("üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç...")
            await page.goto("https://web.max.ru/-68115395545773", timeout=30000)
            await page.wait_for_load_state('networkidle')
            await asyncio.sleep(5)
            
            print("üéØ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω! –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
            print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏ Ctrl+C")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await monitor_messages(page)
            
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            await send_or_update_status_message("–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        except Exception as e:
            print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await send_or_update_status_message("–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        finally:
            await browser.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()